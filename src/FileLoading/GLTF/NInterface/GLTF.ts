
// original code was generated by https://github.com/robertlong/gltf-typescript-generator code thorugh npm

import { Camera } from "./GLTFCamera";
import { Asset, Sampler, Scene, Skin } from "./GLTFOther";
import { Accessor, BufferView , Buffer} from "./GLTFRootToBuffer";
import {Image, Material, Texture } from "./GLTFMaterial"
import { Mesh } from "./GLTFMesh";
import { Deserializer, JsonProperty, ObjectMapper, Serializer } from "json-object-mapper";

// REGEX Used
// find /\*\*.*\n(.*)\n.*\*/\n(.*)
// replace $2 //$1

// find (.*?) (.*)
// replace $1 $2

export type GlTfId = number;



export class GlTf implements Deserializer, Serializer {

  serialize(value: any) {
    return ObjectMapper.serialize(this);
  }
  deserialize(value: any) {
    
    let gltf = ObjectMapper.deserialize(GlTf, value);
    
    return 
  }
  
  extensionsUsed ?: string[];     //   * Names of glTF extensions used in this asset.
  extensionsRequired ?: string[]; //   * Names of glTF extensions required to properly load this asset.
  accessors ?: Accessor[];        //   * An array of accessors.
  animations ?: Animation[];      //   * An array of keyframe animations.
  asset : Asset;                  //   * Metadata about the glTF asset.
  @JsonProperty({ type: Buffer, deserializer: Buffer, serializer: Buffer})
  buffers ?: Buffer[];            //   * An array of buffers.
  bufferViews ?: BufferView[];    //   * An array of bufferViews.
  cameras ?: Camera[];            //   * An array of cameras.
  images ?: Image[];              //   * An array of images.
  materials ?: Material[];        //   * An array of materials.
  meshes ?: Mesh[];               //   * An array of meshes.
  nodes ?: Node[];                //   * An array of nodes.
  samplers ?: Sampler[];          //   * An array of samplers.
  scene ?: GlTfId;                //   * The index of the default scene.
  scenes ?: Scene[];              //   * An array of scenes.
  skins ?: Skin[];                //   * An array of skins.
  textures ?: Texture[];          //   * An array of textures.
  extensions ?: any;
  extras ?: any;
  [k: string]: any;

  public readBuffer( view : BufferView ){

  } 
}