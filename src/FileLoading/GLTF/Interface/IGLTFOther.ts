// original code was generated by https://github.com/robertlong/gltf-typescript-generator code thorugh npm

// REGEX 
// find /\*\*.*\n.*\*(.*)\n.*\*/
// replace //$1

// find "(.*)"(.*)
// replace $1 $2

// strictly increase.

export type GlTfId = number;
 

// The descriptor of the animated property.
export interface AnimationChannelTarget {
  // be defined by an extension.
  node ?: GlTfId;
  // The name of the node's TRS property to animate, or the `weights"` of the Morph Targets it instantiates. For the `"translation"` property, the values that are provided by the sampler are the translation along the X, Y, and Z axes. For the `"rotation"` property, the values are a quaternion in the order (x, y, z, w), where w is the scalar. For the `"scale ` property, the values are the scaling factors along the X, Y, and Z axes.
  path : any | any | any | any | string;
  extensions ?: any;
  extras ?: any;
  [k: string]: any;
}
// An animation channel combines an animation sampler with a target property being animated.
export interface AnimationChannel {
  // The index of a sampler in this animation used to compute the value for the target.
  sampler : GlTfId;
  // The descriptor of the animated property.
  target : AnimationChannelTarget;
  extensions ?: any;
  extras ?: any;
  [k: string]: any;
}
// An animation sampler combines timestamps with a sequence of output values and defines an interpolation algorithm.
export interface AnimationSampler {
  // The index of an accessor containing keyframe timestamps.
  input : GlTfId;
  // Interpolation algorithm.
  interpolation ?: any | any | any | string;
  // The index of an accessor, containing keyframe output values.
  output : GlTfId;
  extensions ?: any;
  extras ?: any;
  [k: string]: any;
}
// A keyframe animation.
export interface Animation {
  // have the same targets.
  channels : AnimationChannel[];
  // An array of animation samplers. An animation sampler combines timestamps with a sequence of output values and defines an interpolation algorithm.
  samplers : AnimationSampler[];
  name ?: any;
  extensions ?: any;
  extras ?: any;
  [k: string]: any;
}
// Metadata about the glTF asset.
export interface Asset {
  // A copyright message suitable for display to credit the content creator.
  copyright ?: string;
  // Tool that generated this glTF model.  Useful for debugging.
  generator ?: string;
  // The glTF version in the form of `<major>.<minor>` that this asset targets.
  version : string;
  // be greater than the asset version.
  minVersion ?: string;
  extensions ?: any;
  extras ?: any;
  [k: string]: any;
}


// An orthographic camera containing properties to create an orthographic projection matrix.
export interface CameraOrthographic {
  // be negative.
  xmag : number;
  // be negative.
  ymag : number;
  // be greater than `znear`.
  zfar : number;
  // The floating-point distance to the near clipping plane.
  znear : number;
  extensions ?: any;
  extras ?: any;
  [k: string]: any;
}
// A perspective camera containing properties to create a perspective projection matrix.
export interface CameraPerspective {
  // The floating-point aspect ratio of the field of view.
  aspectRatio ?: number;
  // be less than Ï€.
  yfov : number;
  // The floating-point distance to the far clipping plane.
  zfar ?: number;
  // The floating-point distance to the near clipping plane.
  znear : number;
  extensions ?: any;
  extras ?: any;
  [k: string]: any;
}
// reference a camera to apply a transform to place the camera in the scene.
export interface Camera {
  // be defined when `perspective` is defined.
  orthographic ?: CameraOrthographic;
  // be defined when `orthographic` is defined.
  perspective ?: CameraPerspective;
  // Specifies if the camera uses a perspective or orthographic projection.
  type : any | any | string;
  name ?: any;
  extensions ?: any;
  extras ?: any;
  [k: string]: any;
}
// be referenced by an URI (or IRI) or a buffer view index.
export interface Image {
  // The URI (or IRI) of the image.
  uri ?: string;
  // be defined when `bufferView` is defined.
  mimeType ?: any | any | string;
  // be defined when `uri` is defined.
  bufferView ?: GlTfId;
  name ?: any;
  extensions ?: any;
  extras ?: any;
  [k: string]: any;
}
// Reference to a texture.
export interface TextureInfo {
  // The index of the texture.
  index : GlTfId;
  // The set index of texture's TEXCOORD attribute used for texture coordinate mapping.
  texCoord ?: number;
  extensions ?: any;
  extras ?: any;
  [k: string]: any;
}
// A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology.
export interface MaterialPbrMetallicRoughness {
  // The factors for the base color of the material.
  baseColorFactor ?: number[];
  // The base color texture.
  baseColorTexture ?: TextureInfo;
  // The factor for the metalness of the material.
  metallicFactor ?: number;
  // The factor for the roughness of the material.
  roughnessFactor ?: number;
  // The metallic-roughness texture.
  metallicRoughnessTexture ?: TextureInfo;
  extensions ?: any;
  extras ?: any;
  [k: string]: any;
}
export interface MaterialNormalTextureInfo {
  index ?: any;
  texCoord ?: any;
  // The scalar parameter applied to each normal vector of the normal texture.
  scale ?: number;
  extensions ?: any;
  extras ?: any;
  [k: string]: any;
}
export interface MaterialOcclusionTextureInfo {
  index ?: any;
  texCoord ?: any;
  // A scalar multiplier controlling the amount of occlusion applied.
  strength ?: number;
  extensions ?: any;
  extras ?: any;
  [k: string]: any;
}
// The material appearance of a primitive.
export interface Material {
  name ?: any;
  extensions ?: any;
  extras ?: any;
  // apply.
  pbrMetallicRoughness ?: MaterialPbrMetallicRoughness;
  // The tangent space normal texture.
  normalTexture ?: MaterialNormalTextureInfo;
  // The occlusion texture.
  occlusionTexture ?: MaterialOcclusionTextureInfo;
  // The emissive texture.
  emissiveTexture ?: TextureInfo;
  // The factors for the emissive color of the material.
  emissiveFactor ?: number[];
  // The alpha rendering mode of the material.
  alphaMode ?: any | any | any | string;
  // The alpha cutoff value of the material.
  alphaCutoff ?: number;
  // Specifies whether the material is double sided.
  doubleSided ?: boolean;
  [k: string]: any;
}

// be present.
export interface Node {
  // The index of the camera referenced by this node.
  camera ?: GlTfId;
  // The indices of this node's children.
  children ?: GlTfId[];
  // The index of the skin referenced by this node.
  skin ?: GlTfId;
  // A floating-point 4x4 transformation matrix stored in column-major order.
  matrix ?: number[];
  // The index of the mesh in this node.
  mesh ?: GlTfId;
  // The node's unit quaternion rotation in the order (x, y, z, w), where w is the scalar.
  rotation ?: number[];
  // The node's non-uniform scale, given as the scaling factors along the x, y, and z axes.
  scale ?: number[];
  // The node's translation along the x, y, and z axes.
  translation ?: number[];
  // also be defined.
  weights ?: number[];
  name ?: any;
  extensions ?: any;
  extras ?: any;
  [k: string]: any;
}
// Texture sampler properties for filtering and wrapping modes.
export interface Sampler {
  // Magnification filter.
  magFilter ?: number | number | number;
  // Minification filter.
  minFilter ?: number | number | number | number | number | number | number;
  // S (U) wrapping mode.
  wrapS ?: number | number | number | number;
  // T (V) wrapping mode.
  wrapT ?: number | number | number | number;
  name ?: any;
  extensions ?: any;
  extras ?: any;
  [k: string]: any;
}
// The root nodes of a scene.
export interface Scene {
  // The indices of each root node.
  nodes ?: GlTfId[];
  name ?: any;
  extensions ?: any;
  extras ?: any;
  [k: string]: any;
}
// Joints and matrices defining a skin.
export interface Skin {
  // The index of the accessor containing the floating-point 4x4 inverse-bind matrices.
  inverseBindMatrices ?: GlTfId;
  // The index of the node used as a skeleton root.
  skeleton ?: GlTfId;
  // Indices of skeleton nodes, used as joints in this skin.
  joints : GlTfId[];
  name ?: any;
  extensions ?: any;
  extras ?: any;
  [k: string]: any;
}
// A texture and its sampler.
export interface Texture {
  // be used.
  sampler ?: GlTfId;
  // supply an alternate texture source, otherwise behavior is undefined.
  source ?: GlTfId;
  name ?: any;
  extensions ?: any;
  extras ?: any;
  [k: string]: any;
}
